{"pageProps":{"postData":{"id":"code-checklist","contentHtml":"<h1>Code quality and engineering practices checklist</h1>\n<p>Thank you <a href=\"https://www.linkedin.com/in/gerardpslowey\">Gerard</a> for helping me brainstorm this list, I'll try to keep it updated:</p>\n<h3>General detection of code issues</h3>\n<p>Where possible you should automate the detection and correction of issues so that they can be picked up before code reviews and won't be missed.</p>\n<ul>\n<li>Linting</li>\n<li>Formatter</li>\n<li>TypeScript (if JS)</li>\n<li>Testing</li>\n<li>Alarms (monitoring)</li>\n<li>Dependency management (dependabot)</li>\n<li>Run CI/CD before commits</li>\n</ul>\n<h3>Good SDLC teamwork practices</h3>\n<ul>\n<li>Separate environments for dev, staging and production</li>\n<li>Sensible branching strategy (trunk based with feature flags)</li>\n<li>Do code reviews</li>\n<li>Small frequent commits and PRs</li>\n<li>Environment for stress testing</li>\n<li>Frontend preview deployments</li>\n<li>Automated deployment and testing pipeline</li>\n<li>Protected main branch</li>\n</ul>\n<h3>Code review checklists</h3>\n<ul>\n<li>Security, eg. bucket policies, IAM roles, secrets management</li>\n<li>Good documentation (new code might need new documentation)</li>\n<li>Are observability features set up? Are important metrics being logged?</li>\n<li>Use tags for cost monitoring</li>\n<li>New code probably needs new tests</li>\n<li>Tests - new code probably needs new tests for edge cases</li>\n<li>Tests - unit, integration, E2E?</li>\n<li>Tests - have high test coverage</li>\n<li>APIs - are parameters validated, eg. (!undefined)</li>\n<li>APIs - returning correct status codes</li>\n<li>APIs - catch errors and fail gracefully</li>\n<li>TypeScript types correct? No <code>any</code></li>\n<li>More elegant code solutions possible</li>\n<li>Do names match conventions</li>\n<li>Is name useful and descriptive</li>\n<li>No commented out code (or at least have a good explanation)</li>\n<li>No \"magic numbers\"</li>\n<li>Any comments needed to explain non-obvious code</li>\n<li>Dependency versions not up to date</li>\n<li>Git messages are OK</li>\n<li>Has cost saving been accounted for? (DB read/writes, Æ› resources, scheduled compute/DB, use serverless when possible, tag resources).</li>\n</ul>\n<h3>Frontend user experience</h3>\n<ul>\n<li>Empty state accounted for</li>\n<li>Loading state accounted for</li>\n<li>Error state accounted for</li>\n<li>Reasonably performant</li>\n<li>Looks good on mobile/tablet/laptop</li>\n<li>Accessibility guidelines reasonably met</li>\n<li>Correct ARIA states</li>\n</ul>\n<h3>Stuff a linter should probably fix but worth looking out for</h3>\n<ul>\n<li>No dead code that can't be reached</li>\n<li>ES6 vs commonJS</li>\n<li>No unnecessary exports</li>\n<li>Formatting - consistent tabs/spaces/semi-colons</li>\n<li>Variables assigned but not used</li>\n</ul>\n<p>PROTIP: If you are doing a side project then worrying about everything on this list except cost cutting measures is a waste of time (just try to ship the bad version of what your making, then make it right).</p>","title":"Code quality and engineering practices checklist","short":"A list of things to consider when writing and reviewing code","date":"2024-02-17","slug":"code-checklist","createdAt":"2024-02-17","img":"blog-2.jpg","tags":["Note"]}},"__N_SSG":true}