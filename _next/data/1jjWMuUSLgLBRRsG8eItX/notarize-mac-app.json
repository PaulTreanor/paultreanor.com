{"pageProps":{"postData":{"id":"notarize-mac-app","contentHtml":"<h1>Notarizing Electron Apps for MacOS</h1>\n<p>Notarizing is an automated process by Apple that ensures your application is safe and compatible with MacOS. It involves sending a copy of your app to Apple's system, and then waiting for a response to hopefully say all is good.</p>\n<p>All MacOS apps must be code-signed and notarized or else users won't be able to install them.</p>\n<h3>Prerequisites</h3>\n<p>Before you can notarize your app, you need to join the Apple Developer Program which costs ‚Ç¨100/year (a not-so-nice gatekeeping measure from Apple). Then you'll need to set up some Apple Developer Program certificates in your Keychain. <a href=\"https://www.rocketride.io/blog/macos-code-sign-notarize-electron-app\">This RocketRide blog post</a> is a helpful guide through this painful process.</p>\n<p>Mercifully these steps are a one-time ordeal for your first MacOS app. For subsequent apps, <a href=\"https://www.electron.build/code-signing.html\">electron-builder should handle code-signing</a> as part of its build process so long as your Keychain credentials are set up correctly.</p>\n<h3>Notarizing</h3>\n<p>The <a href=\"https://github.com/electron/notarize\">Electron Notarize</a> npm module is helpful here. To use the module create the files <em>notarize.js</em> and <em>.env</em>. <strong>You must add <em>.env</em> to your <code>.gitignore</code> file</strong> as it contains secrets that you don't want to commit to your GitHub repo.</p>\n<p><strong>notarize.js</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { notarize } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@electron/notarize'</span>);\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>).<span class=\"hljs-title function_\">config</span>();\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">packageTask</span> () {\n\t<span class=\"hljs-keyword\">const</span> options = {\n\t\t<span class=\"hljs-attr\">appBundleId</span>: <span class=\"hljs-string\">'your.bundle.name'</span>, <span class=\"hljs-comment\">// Unique ID in form `com.paultreanor.promptmarker`</span>\n\t\t<span class=\"hljs-attr\">appPath</span>: <span class=\"hljs-string\">'./path/to/yourAppName.dmg'</span>, <span class=\"hljs-comment\">// Probably in `/release` or `/dist`</span>\n\t\t<span class=\"hljs-attr\">appleId</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">APPLE_ID</span>, <span class=\"hljs-comment\">// Should be an email</span>\n\t\t<span class=\"hljs-attr\">appleIdPassword</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">APPLE_ID_PASSWORD</span>, <span class=\"hljs-comment\">// Read electron/notarize README doc (app specific password)</span>\n\t\t<span class=\"hljs-attr\">teamId</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">TEAM_ID</span>\n\t};\n\t<span class=\"hljs-comment\">// Log your options to make sure everything looks OK - be careful as this will print your secrets</span>\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({options})\n\t<span class=\"hljs-keyword\">try</span> {\n\t\t<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">notarize</span>(options);\n\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Notarization complete\"</span>)\n\t\t} <span class=\"hljs-keyword\">catch</span> (error) {\n\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"Error during notarization: \"</span>, error);\n\t}\n}\n\n<span class=\"hljs-title function_\">packageTask</span>();\n</code></pre>\n<p><strong>.env</strong></p>\n<pre><code class=\"hljs language-text\">APPLE_ID=myappleid@gmail.com\nAPPLE_ID_PASSWORD=xxxx-xxxx-xxxx-xxxx\nTEAM_ID=XXXXXXXXXX \n</code></pre>\n<p>You'll need to follow <a href=\"https://support.apple.com/en-us/HT204397\">these instructions</a> to create an app specific password. Just write in the name of your app and you'll get a 16 digit password for it.</p>\n<p>Fill in the <code>options</code> arguments and then run the script after running your build process:</p>\n<pre><code class=\"hljs language-bash\">npm run build\nnode notarize.js\n</code></pre>\n<p>This can take a few minutes to run and you'll either get an error message from Apple or it will run successfully.</p>\n<h3>Verification and Stapling</h3>\n<p>You can check that your file is notarized correctly by running the following:</p>\n<pre><code class=\"hljs language-bash\">spctl -a -t <span class=\"hljs-built_in\">exec</span> -vv YourApp.dmg\n</code></pre>\n<p>You can staple the notarization ticket directly to your <code>dmg</code> file so it can be verified by Apple even if the user installs it offline:</p>\n<pre><code class=\"hljs language-bash\">xcrun stapler staple <span class=\"hljs-string\">\"YourApp.dmg\"</span>\n</code></pre>\n<p>These commands also work with <code>.app</code> files if you'd rather distribute those instead.</p>\n<p>And there you have it, now you can distribute your app for people to download and install it üëè</p>","title":"Notarizing Electron Apps for MacOS","short":"Guide to notarizing electron apps for MacOS","date":"2023-08-29","slug":"notarize","createdAt":"2023-08-29","img":"blog-2.jpg","tags":["Code"]}},"__N_SSG":true}