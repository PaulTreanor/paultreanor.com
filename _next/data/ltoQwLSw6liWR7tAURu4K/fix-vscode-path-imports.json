{"pageProps":{"postData":{"id":"fix-vscode-path-imports","contentHtml":"<h1>Fixing VSCode \"go to definition\" in webpack projects</h1>\n<p>If you press Command and left-click an import statement in VSCode, it opens the file of the defined import in a new tab. This is a handy feature when traversing components and dependencies across a big React project, but for some reason, it didn't work with the codebase I maintain at Rapid7.</p>\n<p>The issue was caused by VSCode not being able to resolve the path provided in the <code class=\"inline-code-custom-style\">import</code> statement, because my import paths were actually wrong. For example, in a file called <code class=\"inline-code-custom-style\">scanConfigTableActions.js</code>, an object is imported like this:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> historyUtils <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'utils/historyUtils'</span>;\n</code></pre>\n<p>The code runs fine, but <code class=\"inline-code-custom-style\">historyUtils.js</code> is in a completely different part of the project's file tree, so <code class=\"inline-code-custom-style\">utils/historyUtils</code> is not the correct relative import between the two files.</p>\n<pre><code class=\"hljs language-txt\">src/\n└── js/\n    ├── components/\n    │   └── app/\n    │       └── scanConfigs/\n    │           └── scanConfigTableActions.js\n    └── utils/\n        └── historyUtils.js\n</code></pre>\n<h2>webpack and jsconfig.json</h2>\n<p>The reason this non-relative import path resolves OK is because the project's <code class=\"inline-code-custom-style\">webpackconfig.js</code> defines <code class=\"inline-code-custom-style\">src/js</code> as a path to resolve module from, meaning that import statements don't need to specify this part of the path. This means that <code class=\"inline-code-custom-style\">utils/historyUtils.js</code> is the same as writing <code class=\"inline-code-custom-style\">src/js/utils/historyUtils.js</code>.</p>\n<p>This is what was included in the project's <code class=\"inline-code-custom-style\">webpack.config.js</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\nresolve<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    modules<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>path.resolve(__dirname<span class=\"hljs-punctuation\">,</span> 'src/js')<span class=\"hljs-punctuation\">,</span> 'node_modules'<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>VSCode's tooling isn't aware of these paths though. You have to let VSCode know about this by adding the module resolution paths to a jsconfig.json or tsconfig.json file at the root of your project.</p>\n<p>In my case, I added <code class=\"inline-code-custom-style\">src/js</code> as a path:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// jsconfig.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"baseUrl\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\".\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// This must be specified if \"paths\" is.</span>\n    <span class=\"hljs-attr\">\"paths\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"utils/*\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/js/utils/*\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"include\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src/**/*\"</span><span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","title":"Fixing VSCode \"go to definition\" in webpack projects","short":"Troubleshooting VSCode's 'go to definition' feature in webpack-based projects","date":"2024-04-04","slug":"fix-vscode-path-imports","createdAt":"2024-04-04","img":"blog-2.jpg","tags":["Tutorial"]}},"__N_SSG":true}