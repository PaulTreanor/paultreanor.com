{"pageProps":{"postData":{"id":"nested-describe-tests","contentHtml":"<h1>Testing large React applications</h1>\n<p>I've been writing a lot of tests for large applications at Rapid7, and I think the strategies carry over to small projects nicely. This post is focused on writing component level tests with React Testing Library and Jest.</p>\n<h2>Group tests by source files</h2>\n<p>For large applications it's good to write tests in files that correspond with the source files they are testing. So <code class=\"inline-code-custom-style\">login.ts</code> should be tested by <code class=\"inline-code-custom-style\">login.test.ts</code>, and <code class=\"inline-code-custom-style\">logout.ts</code> should be tested by <code class=\"inline-code-custom-style\">logout.test.ts</code>. They shouldn't be tested in a single <code class=\"inline-code-custom-style\">auth.test.ts</code> file. The layout of your <code class=\"inline-code-custom-style\">/tests</code> directory should mirror the <code class=\"inline-code-custom-style\">/src</code> directory - <a href=\"https://symflower.com/en/company/blog/2022/best-practices-for-test-files/\">this pattern is very common in Java projects.</a></p>\n<p>As the number of tests grows, this lets us keep the relationships between our application and its tests manageable. The downside of this is that we are organising tests based on implementation rather than the behaviour we actually want to test.</p>\n<p>A project directory structure where tests mirror src:</p>\n<pre><code class=\"inline-code-custom-style\">/react-app\n|-- /node_modules                      \n|-- /src                     \n|   |-- /components          \n|   |   |-- /Header\n|   |   |   |-- Header.tsx   \n|   |   |-- /Footer\n|   |   |   |-- Footer.tsx   \n|   |-- /utils               \n|   |   |-- validate.ts      \n|   |-- App.tsx              \n|   |-- index.tsx            \n|-- /tests           \n|   |-- /components          \n|   |   |-- /Header\n|   |   |   |-- Header.test.tsx  \n|   |   |-- /Footer\n|   |   |   |-- Footer.test.tsx  \n|   |-- /utils               \n|   |   |-- validate.test.ts \n|   |-- App.test.tsx                \n|-- package.json                         \n|-- README.md                \n</code></pre>\n<h2>Group related tests with nested describes</h2>\n<p>Jest allows you to group tests together with the <a href=\"https://jestjs.io/docs/api#describename-fn\"><code class=\"inline-code-custom-style\">describe</code></a> keyword. Within the describe scope, tests can share the same setup functions, mocks, and cleanup functions. The use of <code class=\"inline-code-custom-style\">describe</code> blocks makes tests easier to read, document, skip, and understand.</p>\n<p>Describes are especially useful for grouping tests that examine the same component under different states. By giving each state its own describe, we can keep tests that share mock data together, and apart from tests that require different mock data. This avoids issues where test environments aren't cleaning up as expected after tests, I run into this issue a lot when tests rely on mocks that aren't organised in <code class=\"inline-code-custom-style\">describe</code> blocks.</p>\n<p>It's hard to make an example of this using simple code because this type of test structure really only comes into it's own when you're using something like a complex Redux store to handle state.</p>\n<p>Here's a not-real code example that gets across the main idea:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'@testing-library/jest-dom'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-redux'</span>;\n<span class=\"hljs-keyword\">import</span> { render, screen, fireEvent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@testing-library/react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dashboard</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../../components/Dashboard\"</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'Dashboard'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'Admin permissions'</span>, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">let</span> handleDelete = jest.<span class=\"hljs-title function_\">fn</span>();\n\n        <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =></span> {\n            store = <span class=\"hljs-title function_\">mockStore</span>({\n                <span class=\"hljs-attr\">userProfile</span>: {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span>,\n                    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'john.doe@example.com'</span>,\n                    <span class=\"hljs-attr\">permissions</span>: <span class=\"hljs-string\">\"admin\"</span>\n                }\n            });\n\n            <span class=\"hljs-title function_\">render</span>(\n                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Dashboard</span> /></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Provider</span>></span></span>\n            );\n        });\n\n        <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">'renders correct user email'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> userEmail = screen.<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">'user-email'</span>);\n            <span class=\"hljs-title function_\">expect</span>(userEmail).<span class=\"hljs-title function_\">toBeInTheDocument</span>();\n            <span class=\"hljs-title function_\">expect</span>(userEmail).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">'john.doe@example.com'</span>);\n        });\n\n        <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">'allows user to delete important thing'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> handleDelete = jest.<span class=\"hljs-title function_\">fn</span>();\n            <span class=\"hljs-keyword\">const</span> deleteButton = screen.<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">'delete-button'</span>);\n            <span class=\"hljs-title function_\">expect</span>(deleteButton).<span class=\"hljs-title function_\">toBeInTheDocument</span>();\n            fireEvent.<span class=\"hljs-title function_\">click</span>(deleteButton);\n            <span class=\"hljs-title function_\">expect</span>(handleDelete).<span class=\"hljs-title function_\">toHaveBeenCalled</span>();\n        });\n    });\n\n    <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">'Guest permissions'</span>, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-keyword\">let</span> handleDelete = jest.<span class=\"hljs-title function_\">fn</span>();\n\n        <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =></span> {\n            store = <span class=\"hljs-title function_\">mockStore</span>({\n                <span class=\"hljs-attr\">userProfile</span>: {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Average Joe'</span>,\n                    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'average.joe@example.com'</span>,\n                    <span class=\"hljs-attr\">permissions</span>: <span class=\"hljs-string\">\"guest\"</span>\n                }\n            });\n\n            <span class=\"hljs-title function_\">render</span>(\n                <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Dashboard</span> /></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Provider</span>></span></span>\n            );\n        });\n\n        <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">'renders correct user email'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> userEmail = screen.<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">'user-email'</span>);\n            <span class=\"hljs-title function_\">expect</span>(userEmail).<span class=\"hljs-title function_\">toBeInTheDocument</span>();\n            <span class=\"hljs-title function_\">expect</span>(userEmail).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">'average.joe@example.com'</span>);\n        });\n\n        <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">'allows user to delete important thing'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-keyword\">const</span> handleDelete = screen.<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">'delete-button'</span>);\n            <span class=\"hljs-title function_\">expect</span>(deleteButton).<span class=\"hljs-title function_\">toBeInTheDocument</span>();\n            fireEvent.<span class=\"hljs-title function_\">click</span>(deleteButton);\n            <span class=\"hljs-title function_\">expect</span>(handleDelete).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title function_\">toHaveBeenCalled</span>();\n        });\n    });\n});\n\n</code></pre>\n<p><a href=\"https://kentcdodds.com/blog/avoid-nesting-when-youre-testing\">Ken C Dodds suggests avoiding describes when writing tests</a>, so take my recommendations with a pinch of salt. His use-case is slightly different though, as he suggests grouping tests by behaviour being tested, rather than the source files being tested. I recommend grouping tests by their source file, and then grouping by behaviour using describes within each test file.</p>\n<p>These details don't matter at all on small projects, but sometimes small projects turn into big projects, and having thousands of tests with no real schema to organise them would be bad.</p>","title":"Testing large React applications","short":"Setting up a local LLM on Mac so that it's always ready for your questions","date":"2024-06-16","slug":"testing-large-react-app","createdAt":"2023-06-16","img":"blog-2.jpg","tags":["Note"]}},"__N_SSG":true}