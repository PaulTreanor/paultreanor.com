<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Paul Treanor&apos;s blog</title>
        <link>https://paultreanor.com/blog</link>
        <description>Bloggo :)</description>
        <lastBuildDate>Fri, 17 Feb 2023 21:39:52 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/nuxt-community/feed-module</generator>
        <item>
            <title><![CDATA[Adding custom electron app icons on Mac with electron-build]]></title>
            <link>https://paultreanor.com/electron-custom-icon</link>
            <guid>https://paultreanor.com/electron-custom-icon</guid>
            <pubDate>Thu, 02 Feb 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="adding-custom-electron-app-icons-on-mac-with-electron-build"><a href="#adding-custom-electron-app-icons-on-mac-with-electron-build" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Adding custom electron app icons on Mac with electron-build</h1>
<h3 id="setting-up-an-electron-app-using-react-and-electron-build"><a href="#setting-up-an-electron-app-using-react-and-electron-build" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Setting up an Electron app using React and electron-build</h3>
<ul>
<li>You can set up a simple Electron app that uses electron-build by following <a href="https://blog.devgenius.io/how-to-build-and-publish-an-electron-app-with-react-tutorial-971e1d9d27ce" rel="nofollow noopener noreferrer" target="_blank">this blog post</a>.</li>
<li>Remove the Windows build code from <code>package.json</code>. Your <code>package</code> and <code>publish</code> scripts should look like this:</li>
</ul>
<div class="nuxt-content-highlight"><pre class="line-numbers language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"package"</span><span class="token operator">:</span> <span class="token string">"electron-builder build --mac -c.extraMetadata.main=build/electron.js --publish never"</span><span class="token punctuation">,</span>
    <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token string">"electron-builder build --mac --publish always"</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div>
<ul>
<li>Remove the <code>win</code> key from the <code>build</code> section of <code>package.json</code></li>
<li>Add <code>/dist</code> to your <code>.gitingore file</code></li>
</ul>
<h3 id="building-and-packaging-the-app"><a href="#building-and-packaging-the-app" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Building and packaging the app</h3>
<p>Launch the electron app by running the following commands:</p>
<div class="nuxt-content-highlight"><pre class="line-numbers language-bash"><code><span class="token function">npm</span> run build
<span class="token function">npm</span> run package
</code></pre></div>
<p>This will output an application as a <code>.dmg</code> file in the project's <code>/dist</code> directory. Double click the file to launch the app.</p>
<img src="/electron-1.png" alt="App in file explorer">
<p>Notice that the app is currently using the default electron icon.
<img src="/electron-2.png" alt="App with default icon"></p>
<h3 id="creating-a-suitable-icon"><a href="#creating-a-suitable-icon" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Creating a suitable icon</h3>
<p>MacOS requires icons to be 512x512px and in the <code>.icns</code> format. You can convert other image formats to <code>.icns</code> using <a href="https://cloudconvert.com/png-to-icns" rel="nofollow noopener noreferrer" target="_blank">cloudconvert</a>.</p>
<h3 id="adding-a-custom-icon"><a href="#adding-a-custom-icon" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Adding a custom icon</h3>
<p>Create a directory called <code>resources</code> and place your icon into it. Then add the following configuration the <code>build</code> key of the your <code>package.json</code>.</p>
<div class="nuxt-content-highlight"><pre class="line-numbers language-json"><code><span class="token property">"directories"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"buildResources"</span><span class="token operator">:</span> <span class="token string">"resources"</span><span class="token punctuation">,</span>
    <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"dist"</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div>
<p>Now if you build and package the application again, it should include your custom icon.</p>
<img src="/electron-3.png" alt="App with new icon">
<p>The code for this complete demo is in <a href="https://github.com/PaulTreanor/electron-build-icon-demo" rel="nofollow noopener noreferrer" target="_blank">this GitHub repository.</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MacBook secondary monitor not waking from sleep solved ðŸ’»]]></title>
            <link>https://paultreanor.com/fix-mac-monitor</link>
            <guid>https://paultreanor.com/fix-mac-monitor</guid>
            <pubDate>Sat, 23 Jul 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="macbook-secondary-monitor-not-waking-from-sleep-solved-"><a aria-hidden="true" href="#macbook-secondary-monitor-not-waking-from-sleep-solved-" tabindex="-1"><span class="icon icon-link"></span></a>MacBook secondary monitor not waking from sleep solved ðŸ’»</h1>
<p>Iâ€™ve had this issue where my MacBookâ€™s external monitor hasn't been waking up after the laptop went to sleep. The fix that worked for me was to manually reset the refresh rate of the external monitor to the monitor's standard refresh rate (which is 60hz for my Phillips 243V, this was set to 75hz by default for some reason).</p>
<ol>
<li>Go to System preferences â†’ Displays â†’ Display settings</li>
<li>Select the secondary monitor from the panel on the left</li>
<li>Play around with the refresh rates</li>
</ol>
<p>This worked on a 2020 M1 MacBook Pro running macOS Monterey. Hopefully this helps someone ðŸ™‚</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Starting with AWS and the Serverless Framework]]></title>
            <link>https://paultreanor.com/starting-serverless</link>
            <guid>https://paultreanor.com/starting-serverless</guid>
            <pubDate>Tue, 21 Sep 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="starting-with-aws-and-the-serverless-framework"><a href="#starting-with-aws-and-the-serverless-framework" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Starting with AWS and the Serverless Framework</h1>
<img src="/fourTheorem.png" alt="fourtheorem">
<p>Since joining fourTheorem earlier this year I've worked with AWS and the Serverless framework a lot, here are some of the best learning resources I've found:</p>
<h2 id="serverless-stack"><a href="#serverless-stack" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Serverless Stack</h2>
<p>Serverless Stack's <a href="https://serverless-stack.com/chapters/setup-the-serverless-framework.html" rel="nofollow noopener noreferrer" target="_blank">guide to the Serverless Framework</a> is a comprehensive and well laid out resource on setting up a serverless project.</p>
<p>The guide details how to set up a fullstack note-taking webapp using Lambda, DynamoDB, Cognito, Amplify, and S3. The project uses React, but the important bits are explained clearly enough to be followed along with any frontend framework. The guide even sets up a billing system with the Stripe API, making it a great way to prototype a potential business project very quickly.</p>
<p>Serverless Stack also provides fantastic standalone pages that explain some of the more confusing ideas in serverless applications, like <a href="https://serverless-stack.com/chapters/what-is-iam.html" rel="nofollow noopener noreferrer" target="_blank">IAM Roles</a>, <a href="https://serverless-stack.com/chapters/cognito-user-pool-vs-identity-pool.html" rel="nofollow noopener noreferrer" target="_blank">Cognito user and identity pools</a>, and <a href="https://serverless-stack.com/chapters/stages-in-serverless-framework.html" rel="nofollow noopener noreferrer" target="_blank">stages</a>.</p>
<h2 id="complete-coding"><a href="#complete-coding" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Complete Coding</h2>
<p>There's not much to say here except that <a href="https://www.youtube.com/channel/UC8uBP0Un18DJAnWjm1CPqBg" rel="nofollow noopener noreferrer" target="_blank">Complete Coding</a> has the best Serverless AWS tutorials on the internet.</p>
<p>The videos are concise, use best practices, and usually come with a git repo in the description which is very helpful. Complete coding is always the first place I go to when I need to refresh my understanding of anything AWS or Serverless.</p>
<h2 id="slic-starter"><a href="#slic-starter" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>SLIC Starter</h2>
<p><a href="https://github.com/fourtheorem/slic-starter" rel="nofollow noopener noreferrer" target="_blank">SLIC Starter</a> is a checklist application that can be used to bootstrap any serverless project.</p>
<p>While Serverless Stack's guide sets up some services such as cognito through the AWS console, SLIC is configured entirely by code. By using this "Infrastructure-as-Code" approach, the project can easily be version controlled, deleted, or deployed on another AWS account.</p>
<p>I find that SLIC is a great resource for seeing how certain best practices should be done in a serverless way:</p>
<ol class="pl-5">
  <li>Define resources as code (not in the console)</li>
  <li>Separate resources and functions</li>
  <li>Build systems from <a href="https://www.fourtheorem.com/blog/monorepo">smaller loosely coupled services</a></li>
  <li>Fully automate the CICD pipeline</li>
</ol>
<p>SLIC starter was created by the team at fourTheorem and it's open source so contributions are welcome by everyone! ðŸ˜Š</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Local outlier factor from scratch in Python]]></title>
            <link>https://paultreanor.com/local-outlier-factor</link>
            <guid>https://paultreanor.com/local-outlier-factor</guid>
            <pubDate>Thu, 03 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="local-outlier-factor-from-scratch-in-python"><a href="#local-outlier-factor-from-scratch-in-python" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Local outlier factor from scratch in Python</h1>
<h3 id="overview"><a href="#overview" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Overview</h3>
<p>Local outlier factor (LOF) is an anomaly detection algorithm which can give you an idea of how similar an item is to other items in a dataset.</p>
<p>The algorithm essentialy compares the density of an item's neighbourhood (how close the items in an area are to eachother) to the density of the item's neighbour's neighbourhoods.</p>
<h3 id="why-use-local-outlier-factor"><a href="#why-use-local-outlier-factor" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Why use local outlier factor?</h3>
<p>LOF is great for datasets with several clusters because it only compares an item to other items in it's locality.</p>
<p>This means that an item that is a large distance from it's nearest neighbours may not be classified as an outlier so long as it's neighbours are also large distances from their nearest neighbours.</p>
<p>This image shows how an outlier in one area of a dataset may not be an outlier in another area of the dataset:</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/LOF.svg/1024px-LOF.svg.png" width="450" alt="Local outlier factor diagram">
<figcaption center="" class="figure-caption text-center">Source: Wikipedia</figcaption>
<p><br>
<br>
</p>
<h3 id="implenting-the-algorithm-in-python"><a href="#implenting-the-algorithm-in-python" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Implenting the algorithm in Python</h3>
<p>This is how LOF is implemented in the <a href="https://github.com/PaulTreanor/openhands" rel="nofollow noopener noreferrer" target="_blank">OpenHands project</a>.</p>
<p>The algorithm is split into 3 methods corrosponding to the 3 maths functions from the <a href="https://en.wikipedia.org/wiki/Local_outlier_factor" rel="nofollow noopener noreferrer" target="_blank">algorithm's Wikipedia page</a>.</p>
<p>The LOF method takes 4 arguments:</p>
<ul class="pl-5">
  <li>A (the item to be classified, as a list of features)</li>
  <li>a list of A's nearest neighbours</li>
  <li>an instance of the KNN classifier</li>
  <li>a value for K</li>
</ul>
<h5 id="1-reachability-distance"><a href="#1-reachability-distance" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>1. Reachability distance</h5>
<img src="/rdist.png" alt="reachability distance">
<p><br>
</p>
<p>The reachability distance between items A and B is the distance between B and it's Kth nearest neighbour or the distance between A and B (whichever is larger).</p>
<div class="nuxt-content-highlight"><pre class="language-python line-numbers"><code><span class="token keyword">def</span>  <span class="token function">reachability_distance</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    B_n_neighbours <span class="token operator">=</span> classifier<span class="token punctuation">.</span>get_knn<span class="token punctuation">(</span>B<span class="token punctuation">)</span>
    k_dist <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span>distance<span class="token punctuation">.</span>euclidean<span class="token punctuation">(</span>B<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> B_n_neighbours<span class="token punctuation">]</span><span class="token punctuation">)</span>
    AB_dist <span class="token operator">=</span> distance<span class="token punctuation">.</span>euclidean<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>
    r_distance <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>k_dist<span class="token punctuation">,</span> AB_dist<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r_distance
</code></pre></div>
<p><br>
</p>
<h5 id="2-local-reachability-density"><a href="#2-local-reachability-density" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>2. Local reachability density</h5>
<img src="/lrd.png" alt="local reachability density">
<p><br>
</p>
<p>Local reachability density is the inverse of the average reachability distance between A and each of it's K nearest neighbours.</p>
<div class="nuxt-content-highlight"><pre class="language-python line-numbers"><code><span class="token keyword">def</span>  <span class="token function">local_r_density</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> nearest_neighbours<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># Local reachability density</span>
    r_distance_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> B <span class="token keyword">in</span> nearest_neighbours<span class="token punctuation">:</span>
        B_r_distance <span class="token operator">=</span> rDistance<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        r_distance_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>B_r_distance<span class="token punctuation">)</span>
    avg_r_distance <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>r_distance_list<span class="token punctuation">)</span><span class="token operator">/</span>k
    local_r_density <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span>avg_r_distance
    <span class="token keyword">return</span> local_r_density
</code></pre></div>
<p><br>
</p>
<h5 id="3-local-outlier-factor"><a href="#3-local-outlier-factor" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>3. Local outlier factor</h5>
<img src="/lof.png" alt="local outlier factor">
<p><br>
The local outlier factor of object A can then be defined as the average local reachability-density of each of Aâ€™s neighbours divided by the local reachability-density of A.</p>
<div class="nuxt-content-highlight"><pre class="language-python line-numbers"><code><span class="token keyword">def</span>  <span class="token function">local_outlier_factor</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> nearest_neighbours<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    A_local_r_density <span class="token operator">=</span> local_r_density<span class="token punctuation">(</span>A<span class="token punctuation">,</span> nearest_neighbours<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    local_r_density_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> B <span class="token keyword">in</span> nearest_neighbours<span class="token punctuation">:</span>
        B_n_neighbours <span class="token operator">=</span> classifier<span class="token punctuation">.</span>get_knn<span class="token punctuation">(</span>B<span class="token punctuation">)</span>
        B_local_r_density <span class="token operator">=</span> local_r_density<span class="token punctuation">(</span>B<span class="token punctuation">,</span> B_n_neighbours<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        local_r_density_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>B_local_r_density<span class="token punctuation">)</span>
    local_r_density_total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>local_r_density_list<span class="token punctuation">)</span>
    divisor <span class="token operator">=</span> A_local_r_density<span class="token operator">*</span>k
    local_outlier_factor <span class="token operator">=</span> local_r_density_total<span class="token operator">/</span>divisor
    local_outlier_factor <span class="token operator">=</span> <span class="token operator">-</span>local_outlier_factor
    <span class="token keyword">return</span> local_outlier_factor
</code></pre></div>
<p><br>
</p>
<h3 id="performance"><a href="#performance" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Performance</h3>
<p>LOF is slow because since it essentially runs KNN <em>k<sup>2</sup>+1</em> times. If performance is important it may be worth looking at the <a href="https://doi.org/10.1145/342009.335388" rel="nofollow noopener noreferrer" target="_blank">local <em>distance</em> outlier factor</a> algorithm instead.</p>
<h3 id="resources"><a href="#resources" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Resources</h3>
<ol class="pl-5">
  <li><a href="https://en.wikipedia.org/wiki/Local_outlier_factor">Local outlier factor's excellent Wikipedia page.</a></li>
  <li><a href="https://benwtrent.github.io/2019/04/26/outlier-detection-from-scratch/">Benjamin Trent's very elegant implementation of LOF.</a></li>
  <li><a href="https://doi.org/10.1145%2F335191.335388">The OG local outlier factor paper by Breunig and Kriegel.</a></li>
</ol>]]></content:encoded>
        </item>
    </channel>
</rss>